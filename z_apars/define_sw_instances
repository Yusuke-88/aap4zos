---
- name: Define z/OSMF Software Instances
  hosts: zos_host
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    zmf_host: itzvsi-zos-pejjzea.techzone.ibm.com
    zmf_port: 10443
    zmf_user: IBMUSER
    zmf_password: 'MY PASS PHRASE'
      
  tasks:
    #####################################################################################
    # PLAY #1: Retrieve all SW Instances                                                #
    #####################################################################################
    - name: Get zosmf software instances
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/swmgmt/swi"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: instance_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        swi_list: '{{ instance_data.json.swilist }}'


    - name: Define CICS software instance
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}:10443/zosmf/swmgmt/swi"
        method: POST
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "CICS"
          system: "VS01_004"
          globalzone: "SMPE.PROGPROD.CSI"
          targetzones: ["CICS61T"]    
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        validate_certs: false
        return_content: true
        status_code: "200"
      register: instance_data
      delegate_to: localhost
      ignore_errors: false









